{"version":3,"file":"index.js","sources":["../src/semver/types.ts","../src/semver/utils.ts","../src/regex/utils.ts","../src/regex/numberRay.ts","../src/regex/numberSegment.ts","../src/regex/numberRange.ts","../src/utils/index.ts","../src/semver/semver.ts","../src/useragent/utils.ts","../src/useragent/useragent.ts","../src/browsers/utils.ts","../src/browsers/browserslist.ts","../src/browsers/optimize.ts","../src/regex/optimize.ts","../src/regex/numbersPart.ts","../src/regex/versions.ts","../src/useragentRegex/optimize.ts","../src/useragentRegex/useragentRegex.ts"],"sourcesContent":["export interface SemverCompareOptions {\n  ignoreMinor?: boolean\n  ignorePatch?: boolean\n  allowZeroSubversions?: boolean\n  allowHigherVersions?: boolean\n}\n\nexport type Semver = [\n  number,\n  number,\n  number\n]\n\nexport type SemverRange = number | number[]\n\nexport type RangedSemver = [\n  SemverRange,\n  SemverRange,\n  SemverRange\n]\n\nexport type SemverLike = string | (number | string)[]\n\nexport enum SemverPart {\n  Major = 0,\n  Minor,\n  Patch\n}\n","/**\n * Check target if is 'all'.\n * @param version - Target to check.\n * @returns Is 'all' or not.\n */\nexport function isAllVersion(version: unknown): boolean {\n  const target: unknown = Array.isArray(version)\n    ? version[0]\n    : version\n\n  return target === 'all'\n}\n","import type { BrowserVersionedRegex } from '../useragent/types.js'\n\nexport const DIGIT_PATTERN = '\\\\d'\nexport const NUMBER_PATTERN = `${DIGIT_PATTERN}+`\nexport const BRACED_NUMBER_PATTERN = `(${NUMBER_PATTERN})`\nexport const ESCAPE_SYMBOL = '\\\\'\n\n/**\n * Join regex parts with \"or\".\n * @param parts - Some regex parts.\n * @param wrapRequired - Should always wrap with braces.\n * @returns Joined parts.\n */\nexport function joinParts(parts: string[], wrapRequired = false) {\n  const joined = parts.join('|')\n\n  return wrapRequired || parts.length > 1\n    ? `(${joined})`\n    : joined\n}\n\n/**\n * Join regexes with \"or\".\n * @param versionedBrowsersRegexes - Regexes strings array.\n * @returns Joined regexes string.\n */\nexport function joinVersionedBrowsersRegexes(versionedBrowsersRegexes: BrowserVersionedRegex[]) {\n  return versionedBrowsersRegexes\n    .map(_ => `(${_.regexString})`)\n    .join('|')\n}\n\n/**\n * Find number patterns count.\n * @param regex - Target string or regex.\n * @returns Number patterns count.\n */\nexport function getNumberPatternsCount(regex: string | RegExp) {\n  return regex.toString().split(BRACED_NUMBER_PATTERN).length - 1\n}\n\n/**\n * Convert regex to string without slashes.\n * @param regex - Target regex.\n * @returns Regex string without slashes.\n */\nexport function regexToString(regex: RegExp) {\n  return regex\n    .toString()\n    .replace(/^\\/|\\/$/g, '')\n}\n\n/**\n * Replace number patterns.\n * @param regex - Target regex.\n * @param numbers - Number patterns to paste.\n * @param numberPatternsCount - Number patterns count to replace.\n * @returns Regex string with replaced number patterns.\n */\nexport function replaceNumberPatterns(\n  regex: string | RegExp,\n  numbers: string[],\n  numberPatternsCount?: number\n) {\n  const strRegex = typeof regex === 'string'\n    ? regex\n    : regexToString(regex)\n  const numbersToReplace = typeof numberPatternsCount === 'number'\n    && numberPatternsCount < numbers.length\n    ? numbers.slice(0, numberPatternsCount)\n    : numbers\n  const numberedStrRegex = numbersToReplace.reduce(\n    (_, num) => _.replace(BRACED_NUMBER_PATTERN, num),\n    strRegex\n  )\n\n  return numberedStrRegex\n}\n\n/**\n * Transform number to digits array.\n * @param num - Target number.\n * @returns Digits array.\n */\nexport function numberToDigits(num: string|number) {\n  return Array.from(num.toString()).map(Number)\n}\n\n/**\n * Skip every char inside square braces.\n * @param skip - Current skip state.\n * @param prevChar - Previous char.\n * @param char - Current char to check.\n * @returns Should skip this char or not.\n */\nexport function skipSquareBraces(skip: boolean, prevChar: string, char: string) {\n  if (char === '['\n    && prevChar !== ESCAPE_SYMBOL\n  ) {\n    return true\n  }\n\n  if (char === ']'\n    && prevChar !== ESCAPE_SYMBOL\n  ) {\n    return false\n  }\n\n  return skip\n}\n\n/**\n * Get possible regex group postfix.\n * @param regexStr - Whole regex string.\n * @param startFrom - Index to start capture.\n * @returns Regex group postfix part.\n */\nexport function capturePostfix(regexStr: string, startFrom: number) {\n  let char = regexStr[startFrom]\n\n  switch (char) {\n    case '+':\n    case '*':\n    case '?':\n      return char\n\n    case '(': {\n      const nextChar = regexStr[startFrom + 1]\n      const afterNextChar = regexStr[startFrom + 2]\n\n      if (\n        nextChar !== '?'\n        || afterNextChar !== '=' && afterNextChar !== '!'\n      ) {\n        return ''\n      }\n\n      break\n    }\n\n    case '{':\n      break\n\n    default:\n      return ''\n  }\n\n  const regexStrLength = regexStr.length\n  let prevChar = ''\n  let braceBalance = 0\n  let skip = false\n  let postfix = ''\n\n  for (let i = startFrom; i < regexStrLength; i++) {\n    char = regexStr[i]\n    prevChar = regexStr[i - 1]\n    skip = skipSquareBraces(skip, prevChar, char)\n\n    if (!skip\n      && prevChar !== ESCAPE_SYMBOL\n      && (\n        char === '('\n        || char === '{'\n      )\n    ) {\n      braceBalance++\n    }\n\n    if (braceBalance > 0) {\n      postfix += char\n    }\n\n    if (!skip\n      && prevChar !== ESCAPE_SYMBOL\n      && braceBalance > 0\n      && (\n        char === ')'\n        || char === '}'\n      )\n    ) {\n      braceBalance--\n\n      if (braceBalance === 0) {\n        break\n      }\n    }\n  }\n\n  return postfix\n}\n","import {\n  DIGIT_PATTERN,\n  NUMBER_PATTERN,\n  numberToDigits\n} from './utils.js'\n\n/**\n * Get digit pattern.\n * @param digit - Ray start.\n * @param includes - Include start digit or use next.\n * @returns Digit pattern.\n */\nexport function rayRangeDigitPattern(digit: number, includes: boolean) {\n  const rangeStart = digit + Number(!includes)\n\n  if (rangeStart === 0) {\n    return DIGIT_PATTERN\n  }\n\n  if (rangeStart === 9) {\n    return '9'\n  }\n\n  if (rangeStart > 9) {\n    return ''\n  }\n\n  return `[${rangeStart}-9]`\n}\n\nfunction filterDigitPattern(pattern: string) {\n  return pattern === DIGIT_PATTERN\n}\n\n/**\n * Reduce number patterns by removing useless patterns.\n * @todo   Is it still useful?\n * @param raysNumberPatterns - Number patterns to filter.\n * @returns Optimized number patterns.\n */\nexport function optimizeRaysNumberPatterns(raysNumberPatterns: string[][]) {\n  let prev: string[] = []\n  let partsCount = 0\n  let prevPartsCount = 0\n\n  return raysNumberPatterns.filter((digitsPatterns, i) => {\n    if (i > 0) {\n      partsCount = digitsPatterns.filter(filterDigitPattern).length\n      prevPartsCount = prev.filter(filterDigitPattern).length\n\n      if (partsCount <= prevPartsCount) {\n        return false\n      }\n    }\n\n    prev = digitsPatterns\n\n    return true\n  })\n}\n\n/**\n * Create numeric ray pattern.\n * @param from - Start from this number.\n * @returns Numeric ray pattern parts.\n */\nexport function rayToNumberPatterns(from: number) {\n  if (from === 0) {\n    return [NUMBER_PATTERN]\n  }\n\n  const digits = numberToDigits(from)\n  const digitsCount = digits.length\n  const other = `${DIGIT_PATTERN}{${digitsCount + 1},}`\n  const zeros = digitsCount - 1\n\n  if (from / Math.pow(10, zeros) === digits[0]) {\n    return [\n      `${\n        rayRangeDigitPattern(digits[0], true)\n      }${\n        DIGIT_PATTERN.repeat(zeros)\n      }`,\n      other\n    ]\n  }\n\n  const raysNumberPatterns = optimizeRaysNumberPatterns(\n    digits.map((_, i) => {\n      const ri = digitsCount - i - 1\n      const d = i <= 0\n      let prev = ' '\n\n      return digits.map<string>((digit, j) => {\n        if (j < ri) {\n          return digit.toString()\n        }\n\n        if (!prev) {\n          return ''\n        }\n\n        if (j > ri) {\n          return DIGIT_PATTERN\n        }\n\n        prev = rayRangeDigitPattern(digit, d)\n\n        return prev\n      })\n    })\n  )\n  const numberPatterns = raysNumberPatterns.map(_ => _.join(''))\n\n  numberPatterns.push(other)\n\n  return numberPatterns\n}\n","import {\n  DIGIT_PATTERN,\n  numberToDigits,\n  joinParts\n} from './utils.js'\n\n/**\n * Get digit pattern.\n * @param from - Segment start.\n * @param to - Segment end.\n * @param zeros - Zeros to add as prefix.\n * @returns Digit pattern.\n */\nexport function segmentRangeNumberPattern(from: number, to: number, zeros?: number) {\n  if (to < from) {\n    return ''\n  }\n\n  const zerosPrefix = typeof zeros === 'number' && zeros > 0\n    ? '0'.repeat(zeros)\n    : ''\n\n  if (from === to) {\n    return `${zerosPrefix}${from}`\n  }\n\n  if (from === 0 && to === 9) {\n    return `${zerosPrefix}${DIGIT_PATTERN}`\n  }\n\n  return `${zerosPrefix}[${from}-${to}]`\n}\n\n/**\n * Split segment range to decade ranges.\n * @param from - Segment start.\n * @param to - Segment end.\n * @returns Ranges.\n */\nexport function splitToDecadeRanges(from: number, to: number) {\n  const ranges: [number, number][] = []\n  let num = from\n  let decade = 1\n\n  do {\n    decade *= 10\n\n    if (num < decade) {\n      ranges.push([num, Math.min(decade - 1, to)])\n      num = decade\n    }\n  } while (decade <= to)\n\n  return ranges\n}\n\n/**\n * Get common and diffs of two numbers (arrays of digits).\n * @param a - Digits.\n * @param b - Other digits.\n * @returns Common part and diffs.\n */\nexport function splitCommonDiff(a: number[], b: number[]): [string, number, number] {\n  const len = a.length\n\n  if (len !== b.length || a[0] !== b[0]) {\n    return null\n  }\n\n  let common = a[0].toString()\n  let currA = 0\n  let currB = 0\n  let diffA = ''\n  let diffB = ''\n\n  for (let i = 1; i < len; i++) {\n    currA = a[i]\n    currB = b[i]\n\n    if (currA === currB) {\n      common += currA\n    } else {\n      diffA += currA\n      diffB += currB\n    }\n  }\n\n  return [\n    common,\n    parseInt(diffA, 10),\n    parseInt(diffB, 10)\n  ]\n}\n\n/**\n * Get shirter variant.\n * @param from - Segment start.\n * @param to - Segment end.\n * @param rangeNumberPatterns - Numeric segment patterns.\n * @returns Enum or numeric segment patterns.\n */\nexport function enumOrRange(from: number, to: number, rangeNumberPatterns: string[]) {\n  const rangePartsCount = rangeNumberPatterns.length\n  const nums: string[] = []\n  let rangeIndex = 0\n  let rangeSymbolsCount = 0\n  let enumSymbolsCount = 0\n\n  for (let num = from; num <= to; num++) {\n    nums.push(num.toString())\n    enumSymbolsCount += Math.floor(Math.log10(num) + 1) + 1\n\n    while (enumSymbolsCount > rangeSymbolsCount) {\n      if (rangeIndex >= rangePartsCount) {\n        return rangeNumberPatterns\n      }\n\n      rangeSymbolsCount += rangeNumberPatterns[rangeIndex++].length + 1\n    }\n  }\n\n  return nums\n}\n\n/**\n * Get segment patterns.\n * @todo   Optomize. E.g. 32-99.\n * @param from - Segment start.\n * @param to - Segment end.\n * @param digitsInNumber - How many digits should be en number. Will be filled by zeros.\n * @returns Segment patterns.\n */\nexport function segmentToNumberPatterns(from: number, to: number, digitsInNumber = 0): string[] {\n  const fromDigits = numberToDigits(from)\n  const digitsCount = fromDigits.length\n\n  if (from < 10 && to < 10 || from === to) {\n    const zeros = digitsInNumber - digitsCount\n\n    return [segmentRangeNumberPattern(from, to, zeros)]\n  }\n\n  const toDigits = numberToDigits(to)\n\n  if (digitsCount !== toDigits.length) {\n    const decadeRanges = splitToDecadeRanges(from, to)\n    const parts = ([] as string[]).concat(\n      ...decadeRanges.map(([from, to]) => segmentToNumberPatterns(from, to, digitsInNumber))\n    )\n\n    return parts\n  }\n\n  const commonStart = splitCommonDiff(fromDigits, toDigits)\n\n  if (Array.isArray(commonStart)) {\n    const [\n      common,\n      from,\n      to\n    ] = commonStart\n    const digitsInNumber = digitsCount - common.length\n    const diffParts = segmentToNumberPatterns(from, to, digitsInNumber)\n\n    return [`${common}${joinParts(diffParts)}`]\n  }\n\n  const range = Array.from({\n    length: digitsCount - 1\n  })\n  const middleSegment = segmentRangeNumberPattern(\n    fromDigits[0] + 1,\n    toDigits[0] - 1\n  )\n  const parts = [\n    ...range.map((_, i) => {\n      const ri = digitsCount - i - 1\n      const d = Number(i > 0)\n\n      return fromDigits.map((digit, j) => {\n        if (j < ri) {\n          return digit\n        }\n\n        if (j > ri) {\n          return segmentRangeNumberPattern(0, 9)\n        }\n\n        return segmentRangeNumberPattern(digit + d, 9)\n      }).join('')\n    }),\n    // but output more readable\n    ...middleSegment\n      ? [`${middleSegment}${DIGIT_PATTERN.repeat(digitsCount - 1)}`]\n      : [],\n    ...range.map((_, i) => {\n      const ri = digitsCount - i - 1\n      const d = Number(i > 0)\n\n      return toDigits.map((digit, j) => {\n        if (j < ri) {\n          return digit\n        }\n\n        if (j > ri) {\n          return segmentRangeNumberPattern(0, 9)\n        }\n\n        return segmentRangeNumberPattern(0, digit - d)\n      }).join('')\n    })\n  ]\n\n  return parts\n}\n\n/**\n * Get segment or enum patterns.\n * @param from - Segment start.\n * @param to - Segment end.\n * @returns Enum or numeric segment patterns.\n */\nexport function segmentToNumberPatternsOrEnum(from: number, to: number) {\n  return enumOrRange(from, to, segmentToNumberPatterns(from, to))\n}\n","import { isAllVersion } from '../semver/utils.js'\nimport {\n  NUMBER_PATTERN,\n  joinParts\n} from './utils.js'\nimport { rayToNumberPatterns } from './numberRay.js'\nimport { segmentToNumberPatternsOrEnum } from './numberSegment.js'\n\n/**\n * Get regex for given numeric range.\n * @param from - Range start.\n * @param to - Range end.\n * @returns Range pattern.\n */\nexport function rangeToRegex(from: number, to = Infinity) {\n  if (isAllVersion(from)) {\n    return NUMBER_PATTERN\n  }\n\n  const numberPatterns = to === Infinity\n    ? rayToNumberPatterns(from)\n    : segmentToNumberPatternsOrEnum(from, to)\n  const regexStr = joinParts(numberPatterns)\n\n  return regexStr\n}\n","/**\n * Compare two arrays.\n * @param a - Array to compare.\n * @param b - Array to compare.\n * @param from - Index to start compare from.\n * @returns Equals or not.\n */\nexport function compareArrays(a: unknown[], b: unknown[], from = 0) {\n  const len = a.length\n\n  for (let i = from; i < len; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Remove duplicates from array.\n * @param items - Items to filter.\n * @returns Uniq items.\n */\nexport function uniq<T>(items: T[]): T[] {\n  return items.filter((_, i) => !items.includes(_, i + 1))\n}\n\n/**\n * Remove duplicated arrays.\n * @param items - Array of arrays to remove duplicates.\n * @returns Uniq arrays.\n */\nexport function uniqItems<T = unknown>(items: T[][]) {\n  return items.filter(Boolean).filter((a, i, items) => items && !items.some((b, j) => j > i && compareArrays(a, b)))\n}\n","import { BRACED_NUMBER_PATTERN } from '../regex/utils.js'\nimport { rangeToRegex } from '../regex/numberRange.js'\nimport { uniqItems } from '../utils/index.js'\nimport type {\n  SemverLike,\n  Semver,\n  RangedSemver,\n  SemverCompareOptions\n} from './types.js'\nimport { isAllVersion } from './utils.js'\n\n/**\n * Get semver from string or array.\n * @param version - Target to convert.\n * @returns Array with semver parts.\n */\nexport function semverify(version: SemverLike): Semver | null {\n  const versionParts = Array.isArray(version)\n    ? version\n    : version.toString().split('.')\n\n  if (isAllVersion(versionParts[0])) {\n    return [\n      versionParts[0] as number,\n      0,\n      0\n    ]\n  }\n\n  let versionPart: number | string = null\n  let semverPart: number = null\n  const semver: Semver = [\n    0,\n    0,\n    0\n  ]\n\n  for (let i = 0; i < 3; i++) {\n    versionPart = versionParts[i]\n\n    if (typeof versionPart === 'undefined') {\n      continue\n    }\n\n    semverPart = typeof versionPart === 'number'\n      ? versionPart\n      : parseInt(versionPart, 10)\n\n    if (isNaN(semverPart)) {\n      return null\n    }\n\n    semver[i] = semverPart\n  }\n\n  return semver\n}\n\n/**\n * Compare semvers.\n * @param a - Semver to compare.\n * @param b - Semver to compare with.\n * @param options - Compare options.\n * @returns Equals or not.\n */\nexport function compareSemvers(a: Semver, b: Semver, options: SemverCompareOptions) {\n  const [\n    major,\n    minor,\n    patch\n  ] = a\n  const [\n    majorBase,\n    minorBase,\n    patchBase\n  ] = b\n  const {\n    ignoreMinor,\n    ignorePatch,\n    allowHigherVersions\n  } = options\n\n  if (isAllVersion(majorBase)) {\n    return true\n  }\n\n  const compareMinor = !ignoreMinor\n  // const comparePatch = ignoreMinor ? false : !ignorePatch;\n  const comparePatch = compareMinor && !ignorePatch\n\n  if (allowHigherVersions) {\n    if (\n      comparePatch && patch < patchBase\n      || compareMinor && minor < minorBase\n    ) {\n      return false\n    }\n\n    return major >= majorBase\n  }\n\n  if (\n    comparePatch && patch !== patchBase\n    || compareMinor && minor !== minorBase\n  ) {\n    return false\n  }\n\n  return major === majorBase\n}\n\n/**\n * Get required semver parts count.\n * @param version - Semver parts or ranges.\n * @param options - Semver compare options.\n * @returns Required semver parts count.\n */\nexport function getRequiredSemverPartsCount(version: Semver|RangedSemver, options: SemverCompareOptions) {\n  const {\n    ignoreMinor,\n    ignorePatch,\n    allowZeroSubversions\n  } = options\n  let shouldRepeatCount = ignoreMinor\n    ? 1\n    : ignorePatch\n      ? 2\n      : 3\n\n  if (allowZeroSubversions) {\n    for (let i = shouldRepeatCount - 1; i > 0; i--) {\n      if (version[i] !== 0 || shouldRepeatCount === 1) {\n        break\n      }\n\n      shouldRepeatCount--\n    }\n  }\n\n  return shouldRepeatCount\n}\n\n/**\n * Ranged semver to regex patterns.\n * @param rangedVersion - Ranged semver.\n * @param options - Semver compare options.\n * @returns Array of regex pattern strings.\n */\nexport function rangedSemverToRegex(rangedVersion: RangedSemver, options: SemverCompareOptions) {\n  const {\n    ignoreMinor,\n    ignorePatch,\n    allowHigherVersions\n  } = options\n  const ignoreIndex = isAllVersion(rangedVersion[0])\n    ? 0\n    : ignoreMinor\n      ? 1\n      : ignorePatch\n        ? 2\n        : Infinity\n\n  if (allowHigherVersions) {\n    const numberPatterns: string[][] = uniqItems(\n      rangedVersion.map((_, i) => {\n        const ri = 2 - i\n        const d = Number(i > 0)\n        let start = 0\n\n        return rangedVersion.map((range, j) => {\n          if (j >= ignoreIndex) {\n            return BRACED_NUMBER_PATTERN\n          }\n\n          start = Array.isArray(range)\n            ? range[0]\n            : range\n\n          if (j < ri) {\n            return start.toString()\n          }\n\n          if (j > ri) {\n            return BRACED_NUMBER_PATTERN\n          }\n\n          return rangeToRegex(start + d)\n        })\n      })\n    )\n\n    return numberPatterns\n  }\n\n  const numberPatterns: string[] = rangedVersion.map((range, i) => {\n    if (i >= ignoreIndex) {\n      return BRACED_NUMBER_PATTERN\n    }\n\n    if (Array.isArray(range)) {\n      return rangeToRegex(\n        range[0],\n        range[1]\n      )\n    }\n\n    return range.toString()\n  })\n\n  return [numberPatterns]\n}\n","import {\n  Semver,\n  SemverCompareOptions,\n  compareSemvers\n} from '../semver/index.js'\n\n/**\n * Check version.\n * @param minVersion - Semver version.\n * @param maxVersion - Semver version.\n * @param bases - Base semver versions.\n * @param options - Semver compare options.\n * @returns Some version is matched.\n */\nexport function someSemverMatched(\n  minVersion: Semver,\n  maxVersion: Semver,\n  bases: Semver[],\n  options: SemverCompareOptions\n) {\n  const compareOptions = {\n    ...options,\n    allowHigherVersions: true\n  }\n\n  return (\n    !minVersion || bases.some(\n      _ => compareSemvers(_, minVersion, compareOptions)\n    )\n  ) && (\n    !maxVersion || bases.some(\n      _ => compareSemvers(maxVersion, _, compareOptions)\n    )\n  )\n}\n","import type { SemverCompareOptions } from '../semver/index.js'\nimport type { BrowsersVersions } from '../browsers/types.js'\nimport type { BrowserRegex } from './types.js'\nimport { someSemverMatched } from './utils.js'\nimport { regexes } from 'ua-regexes-lite';\n// const { regexes } = require('ua-regexes-lite');\n\n/**\n * Get useragent regexes for given browsers.\n * @param browsers - Browsers.\n * @param options - Semver compare options.\n * @param targetRegexes - Override default regexes.\n * @returns User agent regexes.\n */\nexport function getRegexesForBrowsers(browsers: BrowsersVersions, options: SemverCompareOptions, targetRegexes = regexes) {\n  const result: BrowserRegex[] = []\n  let prevFamily = ''\n  let prevRegexIsGlobal = false\n\n  targetRegexes.forEach((regex) => {\n    const requestVersions = browsers.get(regex.family)\n\n    if (!requestVersions) {\n      return\n    }\n\n    let {\n      version,\n      minVersion,\n      maxVersion\n    } = regex\n\n    if (version) {\n      minVersion = version\n      maxVersion = version\n    }\n\n    if (someSemverMatched(minVersion, maxVersion, requestVersions, options)) {\n      if (prevFamily === regex.family && prevRegexIsGlobal) {\n        version = undefined\n        minVersion = undefined\n        maxVersion = undefined\n        result.pop()\n      }\n\n      result.push({\n        ...regex,\n        version,\n        minVersion,\n        maxVersion,\n        requestVersions\n      })\n    }\n\n    prevRegexIsGlobal = !version && !minVersion && !maxVersion\n    prevFamily = regex.family\n  })\n\n  return result\n}\n","/**\n * Array of numbers to array of first and last elements.\n * @param numbers - Array of numbers.\n * @returns Number or two numbers.\n */\nexport function numbersToRanges(numbers: number|number[]) {\n  if (typeof numbers === 'number') {\n    return numbers\n  }\n\n  if (numbers.length === 1) {\n    return numbers[0]\n  }\n\n  return [numbers[0], numbers[numbers.length - 1]]\n}\n","import browserslist from 'browserslist'\nimport { semverify } from '../semver/index.js'\nimport type {\n  Browser,\n  BrowserslistRequest\n} from './types.js'\n\n/**\n * Browsers strings to info objects.\n * @param browsersList - Browsers strings with family and version.\n * @returns Browser info objects.\n */\nexport function parseBrowsersList(browsersList: string[]) {\n  return browsersList.reduce<Browser[]>((browsers, browser) => {\n    const [family, ...versions] = browser.split(/ |-/)\n\n    return versions.reduce((browsers, version) => {\n      const semver = semverify(version)\n\n      if (semver) {\n        browsers.push({\n          family,\n          version: semver\n        })\n      }\n\n      return browsers\n    }, browsers)\n  }, [])\n}\n\n/**\n * Request browsers list.\n * @param options - Options to get browsers list.\n * @returns Browser info objects.\n */\nexport function getBrowsersList(options: BrowserslistRequest = {}) {\n  const {\n    browsers,\n    env,\n    path\n  } = options\n  const browsersList = browserslist(browsers, {\n    env,\n    path\n  })\n  const parsedBrowsers = parseBrowsersList(browsersList)\n\n  return parsedBrowsers\n}\n","import {\n  Semver,\n  RangedSemver,\n  SemverRange,\n  SemverPart\n} from '../semver/index.js'\nimport { compareArrays } from '../utils/index.js'\nimport type {\n  Browser,\n  BrowsersVersions,\n  RangedBrowsersVersions\n} from './types.js'\nimport { numbersToRanges } from './utils.js'\n\n/**\n * Merge browser info object to map with versions.\n * @param browsers - Browser info object to merge.\n * @returns Merged browsers map.\n */\nexport function mergeBrowserVersions(browsers: Browser[]) {\n  const merge: BrowsersVersions = new Map<string, Semver[]>()\n\n  browsers.forEach(({\n    family,\n    version\n  }) => {\n    const versions = merge.get(family)\n\n    if (versions) {\n      const strVersion = version.join('.')\n\n      if (versions.every(_ => _.join('.') !== strVersion)) {\n        versions.push(version)\n      }\n\n      return\n    }\n\n    merge.set(family, [version])\n  })\n\n  merge.forEach((versions) => {\n    versions.sort((a, b) => {\n      for (const i in a) {\n        if (a[i] !== b[i]) {\n          return a[i] - b[i]\n        }\n      }\n\n      return 0\n    })\n  })\n\n  return merge\n}\n\n/**\n * Versions to ranged versions.\n * @param versions - Semver versions list.\n * @returns Ranged versions list.\n */\nexport function versionsListToRanges(versions: Semver[]) {\n  if (versions.length < 2) {\n    return versions\n  }\n\n  const max = versions.length + 1\n  const ranges: RangedSemver[] = []\n  let prev: number[] = null\n  let current: number[] = versions[0]\n  let major: SemverRange = [current[SemverPart.Major]]\n  let minor: SemverRange = [current[SemverPart.Minor]]\n  let patch: SemverRange = [current[SemverPart.Patch]]\n  let part: SemverPart = null\n\n  for (let i = 1; i < max; i++) {\n    prev = versions[i - 1]\n    current = versions[i] || []\n\n    for (let p = SemverPart.Major; p <= SemverPart.Patch; p++) {\n      if ((p === part || part === null)\n        && prev[p] + 1 === current[p]\n        && compareArrays(prev, current, p + 1)\n      ) {\n        part = p\n\n        if (p === SemverPart.Major) {\n          (major as number[]).push(current[SemverPart.Major])\n        } else {\n          major = current[SemverPart.Major]\n        }\n\n        if (p === SemverPart.Minor) {\n          (minor as number[]).push(current[SemverPart.Minor])\n        } else {\n          minor = current[SemverPart.Minor]\n        }\n\n        if (p === SemverPart.Patch) {\n          (patch as number[]).push(current[SemverPart.Patch])\n        } else {\n          patch = current[SemverPart.Patch]\n        }\n\n        break\n      }\n\n      if (part === p || prev[p] !== current[p]) {\n        ranges.push([\n          numbersToRanges(major),\n          numbersToRanges(minor),\n          numbersToRanges(patch)\n        ])\n        major = [current[SemverPart.Major]]\n        minor = [current[SemverPart.Minor]]\n        patch = [current[SemverPart.Patch]]\n        part = null\n        break\n      }\n    }\n  }\n\n  return ranges\n}\n\n/**\n * Browser versions to ranged versions.\n * @param browsers - Browser map with versions.\n * @returns Browser map with ranged versions.\n */\nexport function browserVersionsToRanges(browsers: BrowsersVersions) {\n  const ranged: RangedBrowsersVersions = new Map<string, RangedSemver[]>()\n\n  browsers.forEach((versions, family) => {\n    ranged.set(family, versionsListToRanges(versions))\n  })\n\n  return ranged\n}\n","import {\n  BRACED_NUMBER_PATTERN,\n  ESCAPE_SYMBOL,\n  skipSquareBraces,\n  capturePostfix\n} from './utils.js'\n\nexport const OPTIMIZABLE_GROUP = /^\\([\\s\\w\\d_\\-/!]+\\)$/\nexport const CHARCLASS_UNESCAPES = /[/.$*+?[{}|()]/\n\n/**\n * Optimize regex string:\n * - remove unnecessary braces;\n * - remove unnecessary escapes in ranges.\n * @param regexStr - Regex string to optimize.\n * @returns Optimized regex string.\n */\nexport function optimize(regexStr: string) {\n  const regexStrLength = regexStr.length\n  let inGroup = false\n  let skip = false\n  let char = ''\n  let prevChar = ''\n  let nextChar = ''\n  let postfix = ''\n  let groupAccum = ''\n  let optimizedRegexStr = ''\n\n  for (let i = 0; i < regexStrLength; i++) {\n    char = regexStr[i]\n    prevChar = regexStr[i - 1]\n    nextChar = regexStr[i + 1]\n    skip = skipSquareBraces(skip, prevChar, char)\n\n    if (!skip\n      && prevChar !== ESCAPE_SYMBOL\n      && char === '('\n    ) {\n      if (inGroup) {\n        optimizedRegexStr += groupAccum\n      }\n\n      inGroup = true\n      groupAccum = ''\n    }\n\n    if (skip\n      && char === ESCAPE_SYMBOL\n      && CHARCLASS_UNESCAPES.test(nextChar)\n    ) {\n      i++\n      char = nextChar\n    }\n\n    if (inGroup) {\n      groupAccum += char\n    } else {\n      optimizedRegexStr += char\n    }\n\n    if (!skip\n      && prevChar !== ESCAPE_SYMBOL\n      && char === ')'\n      && inGroup\n    ) {\n      inGroup = false\n      postfix = capturePostfix(regexStr, i + 1)\n      groupAccum += postfix\n\n      if (groupAccum === BRACED_NUMBER_PATTERN\n        || OPTIMIZABLE_GROUP.test(groupAccum)\n      ) {\n        groupAccum = groupAccum.substr(1, groupAccum.length - 2)\n      }\n\n      optimizedRegexStr += groupAccum\n      i += postfix.length\n    }\n  }\n\n  return optimizedRegexStr\n}\n","import {\n  BRACED_NUMBER_PATTERN,\n  ESCAPE_SYMBOL,\n  getNumberPatternsCount,\n  regexToString,\n  skipSquareBraces,\n  capturePostfix\n} from './utils.js'\n\n/**\n * Get from regex part with number patterns.\n * @todo   Optimize.\n *   E.g.: (HeadlessChrome)(?:\\/(\\d+)\\.(\\d+)\\.(\\d+))?\n *   now: (?:\\/(\\d+)\\.(\\d+)\\.(\\d+))?\n *   need: (\\d+)\\.(\\d+)\\.(\\d+)\n * @param regex - Target regex.\n * @param numberPatternsCount - Number patterns to extract.\n * @returns Regex part with number patterns.\n */\nexport function getNumberPatternsPart(regex: string | RegExp, numberPatternsCount?: number) {\n  const regexStr = typeof regex === 'string'\n    ? regex\n    : regexToString(regex)\n  const regexStrLength = regexStr.length\n  const maxNumbersCount = typeof numberPatternsCount === 'number'\n    ? numberPatternsCount\n    : getNumberPatternsCount(regexStr)\n  let braceBalance = 0\n  let skip = false\n  let numberCounter = 0\n  let char = ''\n  let prevChar = ''\n  let numberAccum = ''\n  let numberPatternsPart = ''\n\n  for (let i = 0; i < regexStrLength; i++) {\n    char = regexStr[i]\n    prevChar = regexStr[i - 1]\n    skip = skipSquareBraces(skip, prevChar, char)\n\n    if (!skip\n      && prevChar !== ESCAPE_SYMBOL\n      && char === '('\n    ) {\n      braceBalance++\n      numberAccum = ''\n    }\n\n    if (braceBalance > 0 || numberCounter > 0) {\n      numberPatternsPart += char\n      numberAccum += char\n    }\n\n    if (!skip\n      && prevChar !== ESCAPE_SYMBOL\n      && char === ')'\n      && braceBalance > 0\n    ) {\n      braceBalance--\n\n      if (numberAccum === BRACED_NUMBER_PATTERN) {\n        numberCounter++\n      }\n\n      if (braceBalance === 0\n        && numberCounter === 0\n      ) {\n        numberPatternsPart = ''\n      }\n\n      if (braceBalance === 0\n        && numberCounter >= maxNumbersCount\n      ) {\n        numberPatternsPart += capturePostfix(regexStr, ++i)\n        break\n      }\n    }\n  }\n\n  return numberPatternsPart\n}\n","import {\n  RangedSemver,\n  SemverCompareOptions,\n  rangedSemverToRegex,\n  getRequiredSemverPartsCount,\n  isAllVersion\n} from '../semver/index.js'\nimport type { RangedBrowsersVersions } from '../browsers/types.js'\nimport type {\n  BrowserRegex,\n  BrowserVersionedRegex\n} from '../useragent/types.js'\nimport { uniq } from '../utils/index.js'\nimport {\n  joinParts,\n  getNumberPatternsCount,\n  replaceNumberPatterns,\n  regexToString\n} from './utils.js'\nimport { getNumberPatternsPart } from './numbersPart.js'\n\n/**\n * Apply ranged sevmers to the regex.\n * @todo   if `allowHigherVersions`, apply only min version.\n * @param regex - Target regex.\n * @param versions - Ranged semvers.\n * @param options - Semver compare options.\n * @returns Regex with given versions.\n */\nexport function applyVersionsToRegex(\n  regex: string | RegExp,\n  versions: RangedSemver[],\n  options: SemverCompareOptions\n) {\n  let maxRequiredPartsCount = 1\n  const regexStr = typeof regex === 'string'\n    ? regex\n    : regexToString(regex)\n  const numberPatternsCount = getNumberPatternsCount(regexStr)\n  const suitableVersions = versions.map((version) => {\n    const requiredPartsCount = getRequiredSemverPartsCount(version, options)\n\n    maxRequiredPartsCount = Math.max(maxRequiredPartsCount, requiredPartsCount)\n\n    return numberPatternsCount >= requiredPartsCount\n      ? version\n      : null\n  }).filter(Boolean)\n\n  if (!suitableVersions.length) {\n    return null\n  }\n\n  const numberPatternsPart = getNumberPatternsPart(regexStr, maxRequiredPartsCount)\n  const versionsRegexPart = joinParts(\n    uniq(\n      [].concat(\n        ...suitableVersions.map(version => rangedSemverToRegex(version, options).map(parts => replaceNumberPatterns(\n          numberPatternsPart,\n          parts,\n          maxRequiredPartsCount\n        )))\n      )\n    )\n  )\n  const regexWithVersions = regexStr.replace(numberPatternsPart, versionsRegexPart)\n\n  return regexWithVersions\n}\n\n/**\n * Apply browser versions to info objects.\n * @param browserRegexes - Objects with requested browser version and regex.\n * @param browsers - Ranged versions of browsers.\n * @param options - Semver compare options.\n * @returns Objects with requested browser version and regex special for this version.\n */\nexport function applyVersionsToRegexes(\n  browserRegexes: BrowserRegex[],\n  browsers: RangedBrowsersVersions,\n  options: SemverCompareOptions\n) {\n  const versionedRegexes: BrowserVersionedRegex[] = []\n\n  browserRegexes.forEach(({\n    family,\n    regex: sourceRegex,\n    version,\n    requestVersions,\n    ...other\n  }) => {\n    const sourceRegexString = regexToString(sourceRegex)\n    let regex: RegExp = null\n    let regexString = ''\n\n    if (version) {\n      regex = sourceRegex\n      regexString = sourceRegexString\n    } else {\n      regexString = applyVersionsToRegex(\n        sourceRegexString,\n        browsers.get(family),\n        options\n      )\n      regex = new RegExp(regexString)\n    }\n\n    if (regexString && regex) {\n      versionedRegexes.push({\n        family,\n        sourceRegex,\n        sourceRegexString,\n        regex,\n        regexString,\n        version,\n        requestVersions,\n        requestVersionsStrings: requestVersions.map(_ => (isAllVersion(_)\n          ? String(_[0])\n          : _.join('.'))),\n        ...other\n      })\n    }\n  })\n\n  return versionedRegexes\n}\n","import type { BrowserVersionedRegex } from '../useragent/types.js'\nimport { optimize } from '../regex/optimize.js'\n\n/**\n * Optimize all regexes.\n * @param regexes - Objects with info about compiled regexes.\n * @returns Objects with info about optimized regexes.\n */\nexport function optimizeAll(regexes: BrowserVersionedRegex[]) {\n  return regexes.map<BrowserVersionedRegex>(({\n    regexString,\n    ...regex\n  }) => {\n    const optimizedRegexStr = optimize(regexString)\n    const optimizedRegex = new RegExp(optimizedRegexStr)\n\n    return {\n      ...regex,\n      regex: optimizedRegex,\n      regexString: optimizedRegexStr\n    }\n  })\n}\n","import { getRegexesForBrowsers } from '../useragent/index.js'\nimport {\n  getBrowsersList,\n  mergeBrowserVersions,\n  browserVersionsToRanges\n} from '../browsers/index.js'\nimport {\n  applyVersionsToRegexes,\n  joinVersionedBrowsersRegexes\n} from '../regex/index.js'\nimport type { UserAgentRegexOptions } from './types.js'\nimport { optimizeAll } from './optimize.js'\n\nexport const defaultOptions = {\n  ignoreMinor: false,\n  ignorePatch: true,\n  allowZeroSubversions: false,\n  allowHigherVersions: false\n}\n\n/**\n * Compile browserslist query to regexes.\n * @param options - Browserslist and semver compare options.\n * @returns Objects with info about compiled regexes.\n */\nexport function getUserAgentRegexes(options: UserAgentRegexOptions = {}) {\n  const {\n    browsers,\n    env,\n    path,\n    ...otherOptions\n  } = options\n  const finalOptions = {\n    ...defaultOptions,\n    ...otherOptions\n  }\n  const browsersList = getBrowsersList({\n    browsers,\n    env,\n    path\n  })\n  const mergedBrowsers = mergeBrowserVersions(browsersList)\n  const rangedBrowsers = browserVersionsToRanges(mergedBrowsers)\n  const sourceRegexes = getRegexesForBrowsers(mergedBrowsers, finalOptions)\n  const versionedRegexes = applyVersionsToRegexes(sourceRegexes, rangedBrowsers, finalOptions)\n  const optimizedRegexes = optimizeAll(versionedRegexes)\n\n  return optimizedRegexes\n}\n\n/**\n * Compile browserslist query to regex.\n * @param options - Browserslist and semver compare options.\n * @returns Compiled regex.\n */\nexport function getUserAgentRegex(options: UserAgentRegexOptions = {}) {\n  const regexes = getUserAgentRegexes(options)\n  const regexStr = joinVersionedBrowsersRegexes(regexes)\n  const regex = new RegExp(regexStr)\n\n  return regex\n}\n"],"names":["SemverPart","Major","Minor","Patch","isAllVersion","version","target","Array","isArray","DIGIT_PATTERN","NUMBER_PATTERN","BRACED_NUMBER_PATTERN","ESCAPE_SYMBOL","joinParts","parts","wrapRequired","joined","join","length","joinVersionedBrowsersRegexes","versionedBrowsersRegexes","map","_","regexString","getNumberPatternsCount","regex","toString","split","regexToString","replace","replaceNumberPatterns","numbers","numberPatternsCount","strRegex","numbersToReplace","slice","numberedStrRegex","reduce","num","numberToDigits","from","Number","skipSquareBraces","skip","prevChar","char","capturePostfix","regexStr","startFrom","nextChar","afterNextChar","regexStrLength","braceBalance","postfix","i","rayRangeDigitPattern","digit","includes","rangeStart","filterDigitPattern","pattern","optimizeRaysNumberPatterns","raysNumberPatterns","prev","partsCount","prevPartsCount","filter","digitsPatterns","rayToNumberPatterns","digits","digitsCount","other","zeros","Math","pow","repeat","ri","d","j","numberPatterns","push","segmentRangeNumberPattern","to","zerosPrefix","splitToDecadeRanges","ranges","decade","min","splitCommonDiff","a","b","len","common","currA","currB","diffA","diffB","parseInt","enumOrRange","rangeNumberPatterns","rangePartsCount","nums","rangeIndex","rangeSymbolsCount","enumSymbolsCount","floor","log10","segmentToNumberPatterns","digitsInNumber","fromDigits","toDigits","decadeRanges","concat","commonStart","diffParts","range","middleSegment","segmentToNumberPatternsOrEnum","rangeToRegex","Infinity","compareArrays","uniq","items","uniqItems","Boolean","some","semverify","versionParts","versionPart","semverPart","semver","isNaN","compareSemvers","options","major","minor","patch","majorBase","minorBase","patchBase","ignoreMinor","ignorePatch","allowHigherVersions","compareMinor","comparePatch","getRequiredSemverPartsCount","allowZeroSubversions","shouldRepeatCount","rangedSemverToRegex","rangedVersion","ignoreIndex","start","someSemverMatched","minVersion","maxVersion","bases","compareOptions","getRegexesForBrowsers","browsers","targetRegexes","regexes","result","prevFamily","prevRegexIsGlobal","forEach","requestVersions","get","family","undefined","pop","numbersToRanges","parseBrowsersList","browsersList","browser","versions","getBrowsersList","env","path","browserslist","parsedBrowsers","mergeBrowserVersions","merge","Map","strVersion","every","set","sort","versionsListToRanges","max","current","part","p","browserVersionsToRanges","ranged","OPTIMIZABLE_GROUP","CHARCLASS_UNESCAPES","optimize","inGroup","groupAccum","optimizedRegexStr","test","substr","getNumberPatternsPart","maxNumbersCount","numberCounter","numberAccum","numberPatternsPart","applyVersionsToRegex","maxRequiredPartsCount","suitableVersions","requiredPartsCount","versionsRegexPart","regexWithVersions","applyVersionsToRegexes","browserRegexes","versionedRegexes","sourceRegex","sourceRegexString","RegExp","requestVersionsStrings","String","optimizeAll","optimizedRegex","defaultOptions","getUserAgentRegexes","otherOptions","finalOptions","mergedBrowsers","rangedBrowsers","sourceRegexes","optimizedRegexes","getUserAgentRegex"],"mappings":"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"}